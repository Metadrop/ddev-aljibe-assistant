#!/bin/bash
#ddev-generated



# Constants
DRUSH_ALIASES_FOLDER="./drush/sites"
BEHAT_LOCAL_FOLDER="./tests/behat/local"
INSTALL_DRUPAL_10="n"
ARTISAN_AUTO_INSTALL_PARAM=""
PHP_VERSION="8.3"
CYAN='\033[0;36m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${SCRIPT_DIR}/aljibe_includes"


# Default values for options
AUTO=0
DEFAULT_PROJECT_CORE=11
DEFAULT_PROFILE="minimal"


# Variables
declare PROJECT_CORE
declare PROJECT_NAME
declare SETUP_GIT_REPO
declare INSTALL_DRUPAL
declare INSTALL_PROFILE
declare INSTALL_ARTISAN_SUBTHEME


# Parse command line arguments.
#
# Processes command line flags and options to configure project creation.
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -a|--auto)
        AUTO=1
        shift
        ;;
      -n|--name)
        PROJECT_NAME="$2"
        echo "Received project name: $PROJECT_NAME"
        shift 2
        ;;
      -c|--core)
        if [[ "$2" == "10" || "$2" == "11" ]]; then
          echo "Received Drupal core version: $2"
          PROJECT_CORE="$2"
        else
          echo "Error: Invalid Drupal core version. Only 10 or 11 are valid."
          exit 1
        fi
        shift 2
        ;;
      -e|--extensions)
        PROVIDED_ALJIBE_EXTENSIONS=$2
        echo "Extensions to install: $PROVIDED_ALJIBE_EXTENSIONS"
        shift 2
        ;;
      -g|--git)
        SETUP_GIT_REPO=0
        echo "Git repository will NOT be initialized"
        shift
        ;;
      -i|--install)
        INSTALL_DRUPAL=0
        echo "Drupal will be installed"
        shift
        ;;
      -t|--theme)
        INSTALL_ARTISAN_SUBTHEME=1
        echo "Artisan theme will installed and a subtheme will be created"
        shift
        ;;
      -p|--profile)
        INSTALL_PROFILE="$2"
        echo "Received install profile: $INSTALL_PROFILE"
        shift 2
        ;;
      *)
        echo "Error: Unknown option $1"
        exit 1
        ;;
    esac
  done
}

# Create project.
#
# This function is called from the main script to create a new project.
create_project() {
  echo -e "${GREEN}$1${NC}\n"

  # Parse command line arguments if provided
  parse_arguments "$@"



  configure_project
  git_setup
  aljibe_extensions_setup
  ddev_start
  composer_install
  drupal_install
  behat_setup
  backstopjs_setup
  grumphp_setup
  phpunit_setup
  artefact_generator_setup
  create_subtheme
  add_custom_themes_to_aljibe
}


# Internal function to display a question.
# $1: Question text
# $2: Additional prompt text (e.g., "[Y/n]")
_question() {
  echo -en "${CYAN}$1${NC} $2 "
}

# Format a strings as a generic question.
# $1: Question text
display_question() {
  _question "$1:"
}

# Format a strings as a yes/no question.
# $1: Question text
# $2: Additional prompt text (e.g., "[y/N]")
display_yesno_question() {
  _question "${CYAN}$1"  "${2:-[Y/n]}"
}

# Determine some choices and setup several configuration files
configure_project() {

  cd ${DDEV_APPROOT} || exit

  # Set project name.
  if [ -z "$PROJECT_NAME" ]; then
    if [ "$AUTO" == "0" ]; then
      display_question "Please enter the project name (default to ${DDEV_PROJECT})"
      read PROJECT_NAME_INPUT
    fi
    PROJECT_NAME=${PROJECT_NAME_INPUT:-$DDEV_PROJECT}
  fi


  # Set core to install.
  if [ -z "$PROJECT_CORE" ]; then
    if [ "$AUTO" == "0" ]; then
      display_yesno_question "By default, Drupal 11 will be installed. Do you want to install Drupal 10 instead?" "[y/N]"
      read INSTALL_DRUPAL_10

      if [ "$INSTALL_DRUPAL_10" == "y" ] || [ "$INSTALL_DRUPAL_10" == "Y" ]; then
        PROJECT_CORE=10
      fi
    fi
    PROJECT_CORE=${PROJECT_CORE:-$DEFAULT_PROJECT_CORE}
  fi

  echo "Configuring DDEV environment"

  echo "Configuring ddev project $PROJECT_NAME"
  ddev config --project-type=drupal$PROJECT_CORE --php-version $PHP_VERSION --project-name $PROJECT_NAME --docroot 'web' --auto

  echo "Preparing Aljibe config file"
  cp ${DDEV_APPROOT}/.ddev/aljibe.yaml.example ${DDEV_APPROOT}/.ddev/aljibe.yaml
  os_custom_sed "s/default_site\: self/default_site\: $PROJECT_NAME/g" ${DDEV_APPROOT}/.ddev/aljibe.yaml

  echo "Copying Aljibe Kickstart project files"
  ddev aljibe-kickstart --yes d$PROJECT_CORE

  echo "Setting up Drush aliases file"
  cp "$DRUSH_ALIASES_FOLDER/sitename.site.yml.example" "$DRUSH_ALIASES_FOLDER/$PROJECT_NAME.site.yml"
  os_custom_sed "s/example/$PROJECT_NAME/g" $DRUSH_ALIASES_FOLDER/$PROJECT_NAME.site.yml

  echo "Setting up behat.yml file"
  os_custom_sed "s/example/$PROJECT_NAME/g" $BEHAT_LOCAL_FOLDER/behat.yml
}

# Setup git repository.
#
# Initializes a new git repository with main and develop branches, if required.
git_setup() {

  if [ -z "$SETUP_GIT_REPO" ]; then
    if [ "$AUTO" == "0" ]; then
      display_yesno_question "Do you want to initialize a git repository for your new project?"
      read  INITIALIZE_GIT

      if [ "$INITIALIZE_GIT" == "n" ]; then
        SETUP_GIT_REPO=0
      fi
    fi
    SETUP_GIT_REPO=${SETUP_GIT_REPO:-1}
  fi

  if [ "$SETUP_GIT_REPO" == "1" ]; then
    ## Init with main branch
    echo "Initializing git repository"
    git init -b main
    # Create develop branch
    git checkout -b develop
  fi
}


aljibe_extensions_setup() {
  _question "Please select the Aljibe extensions you want to enable for your project (space to toggle, enter to accept):"
  echo ""
  available_aljibe_extension_labels=(   "Adminer (Database web interface)"  "MkDocs (Documentation)"   "Behat (Acceptance tests)"  "BackstopJS (Visual regression testing)"  "Pa11y (Accessibility checker)"  "Unlighthouse (Quality, performance and correctness testing)"  "Newman (API testing)"  )
  available_aljibe_extensions=(   "adminer"  "mkdocs"  "selenium"  "backstopjs"  "pa11y"  "unlighthouse"  "newman"  )
  preselection=( "true"      "true"      "true"      "true"      "true"      "true"   "true" )

  multiselect result available_aljibe_extensions available_aljibe_extension_labels preselection

  for i in "${!available_aljibe_extensions[@]}"; do
    local current="${available_aljibe_extensions[i]}"
    if [ "${result[i]}" == "true" ]; then
      echo "Installing $current"
      echo ddev add-on get Metadrop/ddev-$current
    else
      local item_installed=$(ddev add-on list --installed | grep $current  | wc -l)

      if [ $item_installed -ne 0 ]; then
        echo "Removing $current"
        echo "ddev add-on remove Metadrop/ddev-$current"
      fi
    fi
  done
}
# Start DDEV environment.
#
# Starts the DDEV container for the project.
ddev_start() {
  ddev start
}

# Install Composer dependencies.
#
# Runs composer install inside the DDEV container to install all project
# dependencies defined in composer.json.
composer_install() {
  ddev composer install
}

# Setup GrumPHP.
#
# Initializes GrumPHP git hooks for code quality checks on commits.
grumphp_setup() {
  ddev exec grumphp git:init
}

# Install Drupal.
#
# Installs Drupal using drush site-install with the appropriate profile.
drupal_install() {

  if [ -z "$INSTALL_DRUPAL" ]; then
    if [ "$AUTO" == "0" ]; then
      display_yesno_question "Do you want to install Drupal?"
      read SHOULD_INSTALL

      if [ "$SHOULD_INSTALL" == "n" ]; then
        INSTALL_DRUPAL=0
      fi
    fi
    INSTALL_DRUPAL=${INSTALL_DRUPAL:-1}
  fi

  if [ "$INSTALL_DRUPAL" == "1" ]; then

    if [ -z "$INSTALL_PROFILE" ]; then
      if [ "$AUTO" == "0" ]; then
        AVAILABLE_PROFILES=("Minimal" "Standard" "Umami demo")

        while [ -z "$INSTALL_PROFILE" ]; do
          display_question "What install profile you want to install ('Minimal' is recommended for development)?"
          echo ""
          select PROFILE in "${AVAILABLE_PROFILES[@]}"; do
            case $PROFILE in
              "Minimal")
                INSTALL_PROFILE="minimal"
                ;;
              "Standard")
                INSTALL_PROFILE="standard"
                ;;
              "Umami demo")
                INSTALL_PROFILE="demo_umami"
                ;;
              *)
                echo "Invalid option. Please select a valid profile."
                continue
                ;;
            esac
            break
          done
        done
      fi
      INSTALL_PROFILE=${INSTALL_PROFILE:-$DEFAULT_PROFILE}
    fi

    echo "Installing profile $INSTALL_PROFILE"
    ddev drush -y si "$INSTALL_PROFILE"
    ddev drush cr
  fi
}

# Create behat directories
behat_setup() {
  local BEHAT_DIR="./web/sites/default/files/behat"
  local BEHAT_DIR_ERRORS="$BEHAT_DIR/errors"

  if [ ! -d "$BEHAT_DIR" ]; then
    mkdir -p "$BEHAT_DIR"
    chmod 755 "$BEHAT_DIR"
  fi

  if [ ! -d "$BEHAT_DIR_ERRORS" ]; then
    mkdir -p "$BEHAT_DIR_ERRORS"
    chmod 755 "$BEHAT_DIR_ERRORS"
  fi
}

# Setup BackstopJS
#
# Currently empty as there are no special steps needed to setup BackstopJS. All
# required files are provided in the Aljibe Kickstart.
backstopjs_setup() {
  return;
}

# Setup artifact generator.
#
# Copies the Drupal artifact builder configuration file template to the project
# root for deployment artifact generation.
artefact_generator_setup() {
  echo "Setting up artefact generator configuration file"
  cp ${DDEV_APPROOT}/vendor/metadrop/drupal-artifact-builder/.drupal-artifact-builder.yml.dist ${DDEV_APPROOT}/.drupal-artifact-builder.yml
}

# Setup PHPUnit.
#
# Configures PHPUnit for Drupal testing by copying and customizing phpunit.xml.
phpunit_setup() {
  echo "Setting up phpunit configuration file"
  cp ${DDEV_APPROOT}/web/core/phpunit.xml.dist ${DDEV_APPROOT}/phpunit.xml

  # While https://www.drupal.org/project/drupal/issues/354725 is active we have
  # to edit PHPUnit conf file with fragile sed commands (the following lines do
  # this).

  echo "Configuring PHPUnit output directory"
  os_custom_sed "s|<parameter name=\"outputDirectory\" value=\"\"/>|<parameter name=\"outputDirectory\" value=\"${DDEV_APPROOT}/web/sites/default/files/simpletest/browser_output\"/>|g" ${DDEV_APPROOT}/phpunit.xml

  # It is not clear if we need to set this. Apparently it is only required when
  # the site is not in root path of the domain. That would hard to defect here
  # in this assistant.
  # echo "Configuring PHPUnit base URL"
  # os_custom_sed "s|<env name=\"BROWSERTEST_OUTPUT_BASE_URL\" value=\"\"/>|<env name=\"BROWSERTEST_OUTPUT_BASE_URL\" value=\"${DDEV_PRIMARY_URL}\"/>|g" ${DDEV_APPROOT}/phpunit.xml

  echo "Configuring PHPUnit base URL"
  os_custom_sed "s|<env name=\"SIMPLETEST_BASE_URL\" value=\"\"/>|<env name=\"SIMPLETEST_BASE_URL\" value=\"${DDEV_PRIMARY_URL}\"/>|g" ${DDEV_APPROOT}/phpunit.xml

  echo "Configuring PHPUnit directory paths"
  os_custom_sed "s|<directory>|<directory>web/core/|g" ${DDEV_APPROOT}/phpunit.xml

  echo "Configuring PHPUnit bootstrap file"
  os_custom_sed "s|tests/bootstrap\.php|web/core/tests/bootstrap.php|" ${DDEV_APPROOT}/phpunit.xml

  echo "Configuring PHPUnit database connection"
  os_custom_sed "s|<env name=\"SIMPLETEST_DB\" value=\"\"/>|<env name=\"SIMPLETEST_DB\" value=\"mysql://db:db@db:3306/db\"/>|g" ${DDEV_APPROOT}/phpunit.xml

  echo "Configuring tests output folder"
  os_custom_sed "s|sites/simpletest/browser_output|web/sites/simpletest/browser_output|" ${DDEV_APPROOT}/phpunit.xml

  echo "Setting up output folder"
  os_custom_sed "s/example/$PROJECT_NAME/g" $BEHAT_LOCAL_FOLDER/behat.yml

  echo "Create tests output folder"
  mkdir ${DDEV_APPROOT}/web/sites/simpletest/browser_output -p
  chmod 755 ${DDEV_APPROOT}/web/sites/simpletest/browser_output
}


# Create Artisan subtheme.
#
# Prompts user to install the Artisan base theme and create a subtheme if
# required.
create_subtheme() {

  local SHOULD_INSTALL

  if [ -z "$INSTALL_ARTISAN_SUBTHEME" ]; then
    if [ "$AUTO" == "0" ]; then
      display_yesno_question "Do you want to create an Artisan subtheme?"
      read SHOULD_INSTALL

      if [ "$SHOULD_INSTALL" != "n" ]; then
        INSTALL_ARTISAN_SUBTHEME=1
      fi
    fi
    INSTALL_ARTISAN_SUBTHEME=${INSTALL_ARTISAN_SUBTHEME:-0}
  fi

  if [ "$INSTALL_ARTISAN_SUBTHEME" == "1" ]; then
    echo "Installing Artisan theme dependency"
    ddev composer require drupal/artisan
    echo "Creating Artisan subtheme"

    if [ $AUTO == "1" ]; then
      ARTISAN_AUTO_INSTALL_PARAM="-y"
    fi

    echo ddev drush --include="web/themes/contrib/artisan" artisan:subtheme:create $ARTISAN_AUTO_INSTALL_PARAM
    echo "Artisan subtheme created"
  fi
}

# Update aljibe.yaml with custom themes.
#
# Scans web/themes/custom/ directory and adds all custom themes to aljibe.yaml
# configuration file so they can be compiled by the theme build system.
add_custom_themes_to_aljibe() {
  find web/themes/custom/ -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' theme_path; do
    THEME=$(basename "$theme_path")
    ddev exec yq -i '.theme_paths.custom_theme = "/var/www/html/web/themes/custom/'$THEME'"' /var/www/html/.ddev/aljibe.yaml
    echo "Añadiendo $THEME a aljibe.yaml"
  done
}

# Cross-platform sed wrapper.
#
# Provides consistent sed -i behavior across macOS and Linux. macOS sed requires
# a backup extension parameter while Linux sed does not.
#
# Arguments:
#   $@: All arguments are passed to sed command
os_custom_sed () {
    if [ "$DETECTED_SO" = "mac" ]; then
        # MacOS sed requires a backup extension, so we use 'bak' as a placeholder
        sed -i bak "$@"
    else
        # Linux sed supports -i without a backup extension
        sed -i "$@"
    fi
}



# Present a menu to select multiple options.
#
# Coe adpated to have a list of lalbes and vales,instead just values that are
# used also as values. Original code from StackOverflow user miu, that also
# adpated code from  Denis Semenenko'adapted.
# See https://unix.stackexchange.com/a/673436/170651.
#
# $1: variable name where to put the result.
# $2: an array of option values as strings.
# $3: an array of option labels as strings.
# $4: an array of default values as strings containing "true" or "false".
function multiselect {
    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()   { printf "$ESC[?25h"; }
    cursor_blink_off()  { printf "$ESC[?25l"; }
    cursor_to()         { printf "$ESC[$1;${2:-1}H"; }
    print_inactive()    { printf "$2   $1 "; }
    print_active()      { printf "$2  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()    { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }

    local return_value=$1
    local -n options=$2
    local -n labels=$3
    local -n defaults=$4

    local selected=()
    for ((i=0; i<${#options[@]}; i++)); do
        if [[ ${defaults[i]} = "true" ]]; then
            selected+=("true")
        else
            selected+=("false")
        fi
        printf "\n"
    done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - ${#options[@]}))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    key_input() {
        local key
        IFS= read -rsn1 key 2>/dev/null >&2
        if [[ $key = ""      ]]; then echo enter; fi;
        if [[ $key = $'\x20' ]]; then echo space; fi;
        if [[ $key = "k" ]]; then echo up; fi;
        if [[ $key = "j" ]]; then echo down; fi;
        if [[ $key = $'\x1b' ]]; then
            read -rsn2 key
            if [[ $key = [A || $key = k ]]; then echo up;    fi;
            if [[ $key = [B || $key = j ]]; then echo down;  fi;
        fi
    }

    toggle_option() {
        local option=$1
        if [[ ${selected[option]} == true ]]; then
            selected[option]=false
        else
            selected[option]=true
        fi
    }

    print_options() {
        # print options by overwriting the last lines
        local idx=0
        for label in "${labels[@]}"; do
            local prefix="[ ]"
            if [[ ${selected[idx]} == true ]]; then
              prefix="[\e[38;5;46m✔\e[0m]"
            fi

            cursor_to $(($startrow + $idx))
            if [ $idx -eq $1 ]; then
                print_active "$label" "$prefix"
            else
                print_inactive "$label" "$prefix"
            fi
            ((idx++))
        done
    }

    local active=0
    while true; do
        print_options $active

        # user key control
        case `key_input` in
            space)  toggle_option $active;;
            enter)  print_options -1; break;;
            up)     ((active--));
                    if [ $active -lt 0 ]; then active=$((${#options[@]} - 1)); fi;;
            down)   ((active++));
                    if [ $active -ge ${#options[@]} ]; then active=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    eval $return_value='("${selected[@]}")'
}
